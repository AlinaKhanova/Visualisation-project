#UI.R
#loading shiny library
library(shiny)

ui <- shinyUI(fluidPage(
  
  #fluid page for dynamically adapting to screens of different resolutions.
  titlePanel("Hotel Booking"),
  sidebarLayout(
    sidebarPanel(
      #implementing radio buttons
      radioButtons("p", "Select column of dataset:",
                   list("lead_time"='a', "adr"='b', "is_canceled"='c', "total_of_special_requests"='d')),
      
      #slider input for bins of histogram
      sliderInput("bins",
                  "Number of bins:",
                  min = 2,
                  max = 30,
                  value = 10)
      
      # Show a plot of the generated distribution
    ),
    mainPanel(
      plotOutput("distPlot")
    )
  )
))
#SERVER.R
library(shiny)

#writing server function
server <- shinyServer(function(input, output) {
  
  #referring output distPlot in ui.r as output$distPlot
  output$distPlot <- renderPlot({
    
    #referring input p in ui.r as input$p
    if(input$p=='a'){
      i<-3
    }
    
    if(input$p=='b'){
      i<-28
    }
    
    if(input$p=='c'){
      i<-2
    }
    
    if(input$p=='d'){
      i<-30
    }
    
    x <- as.numeric(unlist(read_delim("D:\\hotel_booking.csv")[, i]))
    
    #referring input bins in ui.r as input$bins
    #bins <- seq(min(x), max(x), length.out = input$bins + 1)
    if (i!=28){bins <- seq(min(x), max(x), length.out = input$bins + 1)}
    else {x <-x[x<=500]
      bins <- seq(min(x), max(x), length.out = input$bins + 1)}
    #producing histogram as output
    hist_values <- hist(x, breaks = bins, col = 'red', border = 'white', main = " ")
    #lines(density(x), col = "black")  
    text(hist_values$mids,                                      # Add values of histogram on top of bars
         hist_values$counts,
         labels = hist_values$counts,
         adj = c(0.5,  1.5))
  })
})

shinyApp(ui = ui, server = server)
